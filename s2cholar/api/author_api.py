# coding: utf-8

"""
    Literature Graph Service

    Fetch paper and author data from the Semantic Scholar corpus

    OpenAPI spec version: 1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from s2cholar.api_client import ApiClient


class AuthorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_author(
        self, author_id, fields_to_exclude=[],
        async_req=False, return_http_data_only=False,
        preload_content=True,
        request_timeout=None
    ):
        """Details about an author

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_author(author_id, async_req=True)
        >>> result = thread.get()

        Args:
            author_id (str): Author ID.
            fields_to_exclude (List[str]): By default, this function returns
                all fields available. In case you want to exclude some of these
                fields, you should pass as a list of strings. The fields are:
                     - authorId
                     - externalIds
                     - url
                     - name
                     - aliases
                     - affiliations
                     - homepage
                     - papers.paperId
                     - papers.externalIds
                     - papers.url
                     - papers.title
                     - papers.abstract
                     - papers.venue
                     - papers.year
                     - papers.referenceCount
                     - papers.citationCount
                     - papers.influentialCitationCount
                     - papers.isOpenAccess
                     - papers.fieldsOfStudy
                     - papers.authors

        Returns:
            AuthorWithPapers: If the method is called asynchronously, returns
                the request thread.
        """
        fields = {
            'authorId', 'externalIds', 'url', 'name', 'aliases',
            'affiliations', 'homepage', 'papers.paperId', 'papers.externalIds',
            'papers.url', 'papers.title', 'papers.abstract', 'papers.venue',
            'papers.year', 'papers.referenceCount', 'papers.citationCount',
            'papers.influentialCitationCount', 'papers.isOpenAccess',
            'papers.fieldsOfStudy', 'papers.authors'
        }

        # Keep only fields not listed in `fields_to_exclude`
        fields = fields - set(fields_to_exclude)

        collection_formats = {}

        path_params = {'author_id': author_id}
        query_params = [('fields', ','.join(fields))]

        header_params = {}
        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json']
        )

        # HTTP header `Content-Type`
        header_params['Content-Type'] = (
            self.api_client.select_header_content_type(['application/json'])
        )

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/author/{author_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorWithPapers',
            auth_settings=auth_settings,
            async_req=async_req,
            _return_http_data_only=return_http_data_only,
            _preload_content=preload_content,
            _request_timeout=request_timeout,
            collection_formats=collection_formats
        )

    def get_author_papers(
        self, author_id, fields_to_exclude=[],
        async_req=False, return_http_data_only=False,
        preload_content=True,
        request_timeout=None
    ):

        """Details about an author's papers

        Fetch the papers of an author in batches.<br><br> Only retrieves the
        most recent 10,000 citations/references for papers belonging to the
        batch To retrieve the full set of citations for a paper, use the
        /paper/{paper_id}/citations endpoint
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_author_papers(author_id, async_req=True)
        >>> result = thread.get()

        Patams:
            author_id (str): Author ID.
            fields_to_exclude (List[str]): By default, this function returns
                all fields available. In case you want to exclude some of these
                fields, you should pass as a list of strings. The fields are:
                    - paperId
                    - externalIds
                    - url
                    - title
                    - abstract
                    - venue
                    - year
                    - referenceCount
                    - citationCount
                    - influentialCitationCount
                    - isOpenAccess
                    - fieldsOfStudy
                    - authors
                    - citations.paperId
                    - citations.url
                    - citations.title
                    - citations.venue
                    - citations.year
                    - citations.authors
                    - references.paperId
                    - references.url
                    - references.title
                    - references.venue
                    - references.year
                    - references.authors

        Returns:
            PaperBatch: If the method is called asynchronously, returns the
                request thread.
        """
        fields = {
            'paperId', 'externalIds', 'url', 'title', 'abstract', 'venue',
            'year', 'referenceCount', 'citationCount',
            'influentialCitationCount', 'isOpenAccess', 'fieldsOfStudy',
            'authors', 'citations.paperId', 'citations.url', 'citations.title',
            'citations.venue', 'citations.year', 'citations.authors',
            'references.paperId', 'references.url', 'references.title',
            'references.venue', 'references.year', 'references.authors'
        }

        # Keep only fields not listed in `fields_to_exclude`
        fields = fields - set(fields_to_exclude)

        collection_formats = {}

        path_params = {'author_id': author_id}
        query_params = [('fields', ','.join(fields))]

        header_params = {}
        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json']
        )

        # HTTP header `Content-Type`
        header_params['Content-Type'] = (
            self.api_client.select_header_content_type(['application/json'])
        )

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/author/{author_id}/papers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaperBatch',
            auth_settings=auth_settings,
            async_req=async_req,
            _return_http_data_only=return_http_data_only,
            _preload_content=preload_content,
            _request_timeout=request_timeout,
            collection_formats=collection_formats
        )
