# coding: utf-8

"""
    Literature Graph Service

    Fetch paper and author data from the Semantic Scholar corpus  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from s2cholar.api_client import ApiClient


class AuthorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_graph_get_author(self, author_id, **kwargs):  # noqa: E501
        """Details about an author  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_author(author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str author_id: (required)
        :param str fields: A comma-separated list of the fields to be returned.<br><br> The following case-sensitive author fields are recognized: <ul>     <li><code>authorId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>name</code> - Included if no fields are specified</li>     <li><code>aliases</code></li>     <li><code>affiliations</code></li>     <li><code>homepage</code></li>     <li><code>papers</code></li>         <ul>             <li><code>paperId</code> - Always included</li>             <li><code>externalIds</code></li>             <li><code>url</code></li>             <li><code>title</code> - Included if no fields are specified</li>             <li><code>abstract</code></li>             <li><code>venue</code></li>             <li><code>year</code></li>             <li><code>referenceCount</code></li>             <li><code>citationCount</code></li>             <li><code>influentialCitationCount</code></li>             <li><code>isOpenAccess</code></li>             <li><code>fieldsOfStudy</code></li>             <li><code>authors</code>- Will include: <code>authorId</code> & <code>name</code></li>             <li>To get more detailed information about an author's papers, use the <code>/author/{author_id}/papers</code> endpoint</li>         </ul> </ul> <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101</code></li>     <ul>         <li>Returns the author's always included field of authorId plus the name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101?fields=aliases,papers</code></li>     <ul>         <li>Returns the author's authorId, aliases, and list of papers.  </li>         <li>Each paper has its paperId plus its title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101?fields=url,papers.abstract,papers.authors</code></li>     <ul>         <li>Returns the author's authorId, url, and list of papers.  </li>         <li>Each paper has its paperId, abstract, and list of authors.</li>         <li>In that list of authors, each author has their authorId and name.</li>     </ul> </ul>
        :return: AuthorWithPapers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_graph_get_author_with_http_info(author_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_get_author_with_http_info(author_id, **kwargs)  # noqa: E501
            return data

    def get_graph_get_author_with_http_info(self, author_id, **kwargs):  # noqa: E501
        """Details about an author  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_author_with_http_info(author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str author_id: (required)
        :param str fields: A comma-separated list of the fields to be returned.<br><br> The following case-sensitive author fields are recognized: <ul>     <li><code>authorId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>name</code> - Included if no fields are specified</li>     <li><code>aliases</code></li>     <li><code>affiliations</code></li>     <li><code>homepage</code></li>     <li><code>papers</code></li>         <ul>             <li><code>paperId</code> - Always included</li>             <li><code>externalIds</code></li>             <li><code>url</code></li>             <li><code>title</code> - Included if no fields are specified</li>             <li><code>abstract</code></li>             <li><code>venue</code></li>             <li><code>year</code></li>             <li><code>referenceCount</code></li>             <li><code>citationCount</code></li>             <li><code>influentialCitationCount</code></li>             <li><code>isOpenAccess</code></li>             <li><code>fieldsOfStudy</code></li>             <li><code>authors</code>- Will include: <code>authorId</code> & <code>name</code></li>             <li>To get more detailed information about an author's papers, use the <code>/author/{author_id}/papers</code> endpoint</li>         </ul> </ul> <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101</code></li>     <ul>         <li>Returns the author's always included field of authorId plus the name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101?fields=aliases,papers</code></li>     <ul>         <li>Returns the author's authorId, aliases, and list of papers.  </li>         <li>Each paper has its paperId plus its title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101?fields=url,papers.abstract,papers.authors</code></li>     <ul>         <li>Returns the author's authorId, url, and list of papers.  </li>         <li>Each paper has its paperId, abstract, and list of authors.</li>         <li>In that list of authors, each author has their authorId and name.</li>     </ul> </ul>
        :return: AuthorWithPapers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['author_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graph_get_author" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'author_id' is set
        if self.api_client.client_side_validation and ('author_id' not in params or
                                                       params['author_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `author_id` when calling `get_graph_get_author`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'author_id' in params:
            path_params['author_id'] = params['author_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/author/{author_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorWithPapers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_graph_get_author_papers(self, author_id, **kwargs):  # noqa: E501
        """Details about an author's papers  # noqa: E501

        Fetch the papers of an author in batches.<br><br> Only retrieves the most recent 10,000 citations/references for papers belonging to the batch To retrieve the full set of citations for a paper, use the /paper/{paper_id}/citations endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_author_papers(author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str author_id: (required)
        :param int offset: When returning a list of results, start with the element at this position in the list.
        :param int limit: The maximum number of results to return.
        :param str fields: A comma-separated list of the fields to be returned.<br><br>  The following case-sensitive paper fields are recognized: <ul>     <li><code>paperId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>title</code> - Included if no fields are specified</li>     <li><code>abstract</code></li>     <li><code>venue</code></li>     <li><code>year</code></li>     <li><code>referenceCount</code></li>     <li><code>citationCount</code></li>     <li><code>influentialCitationCount</code></li>     <li><code>isOpenAccess</code></li>     <li><code>fieldsOfStudy</code></li>     <li><code>authors</code>- Up to 500 will be returned.  Will include: <code>authorId</code> & <code>name</code></li>     <li><code>citations</code> - May be truncated</li>     <ul>         <li><code>paperId</code> - Always included</li>         <li><code>url</code>         <li><code>title</code></li>         <li><code>venue</code></li>         <li><code>year</code></li>         <li><code>authors</code>- Will include: <code>authorId</code> & <code>name</code></li>         <li>Total number of citations will be truncated at 10,000 for the entire batch.</li>         <li>To fetch more, reduce the size of the batch with <code>limit=</code> or use the <code>/paper/{paper_id}/citations</code> endpoint.</li>     </ul>     <li><code>references</code> - May be truncated</li>     <ul>         <li><code>paperId</code> - Always included</li>         <li><code>url</code></li>         <li><code>title</code></li>         <li><code>venue</code></li>         <li><code>year</code></li>         <li><code>authors</code>- Will include: <code>authorId</code> & <code>name</code></li>         <li>Total number of references will be truncated at 10,000 for the entire batch.</li>         <li>To fetch more, reduce the size of the batch with <code>limit=</code> or use the <code>/paper/{paper_id}/references</code> endpoint.</li>     </ul> </ul> <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers</code></li>     <ul>         <li>Return with offset=0, and data is a list of the first 100 papers.</li>         <li>Each paper has its paperId and title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers?fields=url,year,authors&limit=2</code></li>     <ul>         <li>Returns with offset=0, next=2, and data is a list of 2 papers.</li>         <li>Each paper has its paperId, url, year, and list of authors.</li>         <li>Each author has their authorId and name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers?fields=citations.authors&offset=260</code></li>     <ul>         <li>Returns with offset=260, and data is a list of the last 4 papers.</li>         <li>Each paper has its paperId and a list of citations.</li>         <li>Each citation has its paperId and a list of authors.</li>         <li>Each author has their authorId and name.</li>     </ul> </ul>  
        :return: PaperBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_graph_get_author_papers_with_http_info(author_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_get_author_papers_with_http_info(author_id, **kwargs)  # noqa: E501
            return data

    def get_graph_get_author_papers_with_http_info(self, author_id, **kwargs):  # noqa: E501
        """Details about an author's papers  # noqa: E501

        Fetch the papers of an author in batches.<br><br> Only retrieves the most recent 10,000 citations/references for papers belonging to the batch To retrieve the full set of citations for a paper, use the /paper/{paper_id}/citations endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_author_papers_with_http_info(author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str author_id: (required)
        :param int offset: When returning a list of results, start with the element at this position in the list.
        :param int limit: The maximum number of results to return.
        :param str fields: A comma-separated list of the fields to be returned.<br><br>  The following case-sensitive paper fields are recognized: <ul>     <li><code>paperId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>title</code> - Included if no fields are specified</li>     <li><code>abstract</code></li>     <li><code>venue</code></li>     <li><code>year</code></li>     <li><code>referenceCount</code></li>     <li><code>citationCount</code></li>     <li><code>influentialCitationCount</code></li>     <li><code>isOpenAccess</code></li>     <li><code>fieldsOfStudy</code></li>     <li><code>authors</code>- Up to 500 will be returned.  Will include: <code>authorId</code> & <code>name</code></li>     <li><code>citations</code> - May be truncated</li>     <ul>         <li><code>paperId</code> - Always included</li>         <li><code>url</code>         <li><code>title</code></li>         <li><code>venue</code></li>         <li><code>year</code></li>         <li><code>authors</code>- Will include: <code>authorId</code> & <code>name</code></li>         <li>Total number of citations will be truncated at 10,000 for the entire batch.</li>         <li>To fetch more, reduce the size of the batch with <code>limit=</code> or use the <code>/paper/{paper_id}/citations</code> endpoint.</li>     </ul>     <li><code>references</code> - May be truncated</li>     <ul>         <li><code>paperId</code> - Always included</li>         <li><code>url</code></li>         <li><code>title</code></li>         <li><code>venue</code></li>         <li><code>year</code></li>         <li><code>authors</code>- Will include: <code>authorId</code> & <code>name</code></li>         <li>Total number of references will be truncated at 10,000 for the entire batch.</li>         <li>To fetch more, reduce the size of the batch with <code>limit=</code> or use the <code>/paper/{paper_id}/references</code> endpoint.</li>     </ul> </ul> <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers</code></li>     <ul>         <li>Return with offset=0, and data is a list of the first 100 papers.</li>         <li>Each paper has its paperId and title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers?fields=url,year,authors&limit=2</code></li>     <ul>         <li>Returns with offset=0, next=2, and data is a list of 2 papers.</li>         <li>Each paper has its paperId, url, year, and list of authors.</li>         <li>Each author has their authorId and name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/author/1741101/papers?fields=citations.authors&offset=260</code></li>     <ul>         <li>Returns with offset=260, and data is a list of the last 4 papers.</li>         <li>Each paper has its paperId and a list of citations.</li>         <li>Each citation has its paperId and a list of authors.</li>         <li>Each author has their authorId and name.</li>     </ul> </ul>  
        :return: PaperBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['author_id', 'offset', 'limit', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graph_get_author_papers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'author_id' is set
        if self.api_client.client_side_validation and ('author_id' not in params or
                                                       params['author_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `author_id` when calling `get_graph_get_author_papers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'author_id' in params:
            path_params['author_id'] = params['author_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/author/{author_id}/papers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaperBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
