# coding: utf-8

"""
    Literature Graph Service

    Fetch paper and author data from the Semantic Scholar corpus  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from s2cholar.api_client import ApiClient


class PaperApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_graph_get_paper(self, paper_id, **kwargs):  # noqa: E501
        """Details about a paper  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_paper(paper_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paper_id: The following types of IDs are supported: <ul>     <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>     <li><code>CorpusId:&lt;id&gt;</code> - Semantic Scholar numerical ID, e.g. <code>215416146</code></li>     <li><code>DOI:&lt;doi&gt;</code> - a <a href=\"http://doi.org\">Digital Object Identifier</a>,         e.g. <code>DOI:10.18653/v1/N18-3011</code></li>     <li><code>ARXIV:&lt;id&gt;</code> - <a href=\"https://arxiv.org/\">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>     <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>     <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>     <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>     <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>     <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li> </ul>  URLs are recognized from the following sites: <ul>     <li><a href=\"https://www.semanticscholar.org/\">semanticscholar.org</a></li>     <li><a href=\"https://arxiv.org/\">arxiv.org</a></li>     <li><a href=\"https://www.aclweb.org\">aclweb.org</a></li>     <li><a href=\"https://www.acm.org/\">acm.org</a></li>     <li><a href=\"https://www.biorxiv.org/\">biorxiv.org</a></li> </ul> (required)
        :param str fields: A comma-separated list of the fields to be returned.<br><br>  The following case-sensitive paper fields are recognized: <ul>     <li><code>paperId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>title</code> - Included if no fields are specified</li>     <li><code>abstract</code></li>     <li><code>venue</code></li>     <li><code>year</code></li>     <li><code>referenceCount</code></li>     <li><code>citationCount</code></li>     <li><code>influentialCitationCount</code></li>     <li><code>isOpenAccess</code></li>     <li><code>fieldsOfStudy</code></li>     <li><code>authors</code> - Up to 500 will be returned</li>         <ul>             <li><code>authorId</code> - Always included</li>             <li><code>externalIds</code></li>             <li><code>url</code></li>             <li><code>name</code> - Included if no fields are specified</li>             <li><code>aliases</code></li>             <li><code>affiliations</code></li>             <li><code>homepage</code></li>             <li>To get more detailed information about a paper's authors, use the <code>/paper/{paper_id}/authors</code> endpoint</li>         </ul>     <li><code>citations</code> - Up to 1000 will be returned</li>         <ul>             <li><code>paperId</code> - Always included</li>             <li><code>url</code></li>             <li><code>title</code> - Included if no fields are specified</li>             <li><code>venue</code></li>             <li><code>year</code></li>             <li><code>authors</code> - Will include: <code>authorId</code> & <code>name</code></li>             <li>To get more detailed information about a paper's citations, use the <code>/paper/{paper_id}/citations</code> endpoint</li>         </ul>     <li><code>references</code> - Up to 1000 will be returned</li>         <ul>             <li><code>paperId</code> - Always included</li>             <li><code>url</code></li>             <li><code>title</code> - Included if no fields are specified</li>             <li><code>venue</code></li>             <li><code>year</code></li>             <li><code>authors</code> - Will include: <code>authorId</code> & <code>name</code></li>             <li>To get more detailed information about a paper's references, use the <code>/paper/{paper_id}/references</code> endpoint</li>         </ul>     <li><code>embedding</code></li> </ul> <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b</code></li>     <ul>         <li>Returns the paper's always included field of paperId plus its title.  </li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b?fields=url,year,authors</code></li>     <ul>         <li>Returns the paper's paperId, url, year, and list of authors.  </li>         <li>Each author has authorId and name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b?fields=citations.authors</code></li>     <ul>         <li>Returns the paper's paperId and list of citations.  </li>         <li>Each citation has its paperId plus its list of authors.</li>         <li>Each author has their 2 always included fields of authorId and name.</li>     </ul> </ul>
        :return: FullPaper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_graph_get_paper_with_http_info(paper_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_get_paper_with_http_info(paper_id, **kwargs)  # noqa: E501
            return data

    def get_graph_get_paper_with_http_info(self, paper_id, **kwargs):  # noqa: E501
        """Details about a paper  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_paper_with_http_info(paper_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paper_id: The following types of IDs are supported: <ul>     <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>     <li><code>CorpusId:&lt;id&gt;</code> - Semantic Scholar numerical ID, e.g. <code>215416146</code></li>     <li><code>DOI:&lt;doi&gt;</code> - a <a href=\"http://doi.org\">Digital Object Identifier</a>,         e.g. <code>DOI:10.18653/v1/N18-3011</code></li>     <li><code>ARXIV:&lt;id&gt;</code> - <a href=\"https://arxiv.org/\">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>     <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>     <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>     <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>     <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>     <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li> </ul>  URLs are recognized from the following sites: <ul>     <li><a href=\"https://www.semanticscholar.org/\">semanticscholar.org</a></li>     <li><a href=\"https://arxiv.org/\">arxiv.org</a></li>     <li><a href=\"https://www.aclweb.org\">aclweb.org</a></li>     <li><a href=\"https://www.acm.org/\">acm.org</a></li>     <li><a href=\"https://www.biorxiv.org/\">biorxiv.org</a></li> </ul> (required)
        :param str fields: A comma-separated list of the fields to be returned.<br><br>  The following case-sensitive paper fields are recognized: <ul>     <li><code>paperId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>title</code> - Included if no fields are specified</li>     <li><code>abstract</code></li>     <li><code>venue</code></li>     <li><code>year</code></li>     <li><code>referenceCount</code></li>     <li><code>citationCount</code></li>     <li><code>influentialCitationCount</code></li>     <li><code>isOpenAccess</code></li>     <li><code>fieldsOfStudy</code></li>     <li><code>authors</code> - Up to 500 will be returned</li>         <ul>             <li><code>authorId</code> - Always included</li>             <li><code>externalIds</code></li>             <li><code>url</code></li>             <li><code>name</code> - Included if no fields are specified</li>             <li><code>aliases</code></li>             <li><code>affiliations</code></li>             <li><code>homepage</code></li>             <li>To get more detailed information about a paper's authors, use the <code>/paper/{paper_id}/authors</code> endpoint</li>         </ul>     <li><code>citations</code> - Up to 1000 will be returned</li>         <ul>             <li><code>paperId</code> - Always included</li>             <li><code>url</code></li>             <li><code>title</code> - Included if no fields are specified</li>             <li><code>venue</code></li>             <li><code>year</code></li>             <li><code>authors</code> - Will include: <code>authorId</code> & <code>name</code></li>             <li>To get more detailed information about a paper's citations, use the <code>/paper/{paper_id}/citations</code> endpoint</li>         </ul>     <li><code>references</code> - Up to 1000 will be returned</li>         <ul>             <li><code>paperId</code> - Always included</li>             <li><code>url</code></li>             <li><code>title</code> - Included if no fields are specified</li>             <li><code>venue</code></li>             <li><code>year</code></li>             <li><code>authors</code> - Will include: <code>authorId</code> & <code>name</code></li>             <li>To get more detailed information about a paper's references, use the <code>/paper/{paper_id}/references</code> endpoint</li>         </ul>     <li><code>embedding</code></li> </ul> <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b</code></li>     <ul>         <li>Returns the paper's always included field of paperId plus its title.  </li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b?fields=url,year,authors</code></li>     <ul>         <li>Returns the paper's paperId, url, year, and list of authors.  </li>         <li>Each author has authorId and name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b?fields=citations.authors</code></li>     <ul>         <li>Returns the paper's paperId and list of citations.  </li>         <li>Each citation has its paperId plus its list of authors.</li>         <li>Each author has their 2 always included fields of authorId and name.</li>     </ul> </ul>
        :return: FullPaper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paper_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graph_get_paper" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'paper_id' is set
        if self.api_client.client_side_validation and ('paper_id' not in params or
                                                       params['paper_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `paper_id` when calling `get_graph_get_paper`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'paper_id' in params:
            path_params['paper_id'] = params['paper_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paper/{paper_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullPaper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_graph_get_paper_authors(self, paper_id, **kwargs):  # noqa: E501
        """Details about a paper's authors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_paper_authors(paper_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paper_id: The following types of IDs are supported: <ul>     <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>     <li><code>CorpusId:&lt;id&gt;</code> - Semantic Scholar numerical ID, e.g. <code>215416146</code></li>     <li><code>DOI:&lt;doi&gt;</code> - a <a href=\"http://doi.org\">Digital Object Identifier</a>,         e.g. <code>DOI:10.18653/v1/N18-3011</code></li>     <li><code>ARXIV:&lt;id&gt;</code> - <a href=\"https://arxiv.org/\">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>     <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>     <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>     <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>     <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>     <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li> </ul>  URLs are recognized from the following sites: <ul>     <li><a href=\"https://www.semanticscholar.org/\">semanticscholar.org</a></li>     <li><a href=\"https://arxiv.org/\">arxiv.org</a></li>     <li><a href=\"https://www.aclweb.org\">aclweb.org</a></li>     <li><a href=\"https://www.acm.org/\">acm.org</a></li>     <li><a href=\"https://www.biorxiv.org/\">biorxiv.org</a></li> </ul> (required)
        :param int offset: When returning a list of results, start with the element at this position in the list.
        :param int limit: The maximum number of results to return.
        :param str fields: A comma-separated list of the fields to be returned.<br><br> The following case-sensitive author fields are recognized: <ul>     <li><code>authorId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>name</code> - Included if no fields are specified</li>     <li><code>aliases</code></li>     <li><code>affiliations</code></li>     <li><code>homepage</code></li>     <li><code>papers</code></li>     <ul>         <li><code>paperId</code> - Always included</li>         <li><code>externalIds</code></li>         <li><code>url</code></li>         <li><code>title</code> - Included if no fields are specified</li>         <li><code>abstract</code></li>         <li><code>venue</code></li>         <li><code>year</code></li>         <li><code>referenceCount</code></li>         <li><code>citationCount</code></li>         <li><code>influentialCitationCount</code></li>         <li><code>isOpenAccess</code></li>         <li><code>fieldsOfStudy</code></li>         <li><code>authors</code> - Will include: <code>authorId</code> & <code>name</code></li>     </ul> </ul> <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/authors</code></li>     <ul>         <li>Returns with offset=0, and data is a list of all 3 authors.</li>         <li>Each author has their authorId and name</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/authors?fields=affiliations,papers&limit=2</code></li>     <ul>         <li>Returns with offset=0, next=2, and data is a list of 2 authors.</li>         <li>Each author has their authorId, affiliations, and list of papers.</li>         <li>Each paper has its paperId and title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/authors?fields=url,papers.year,papers.authors&offset=2</code></li>     <ul>         <li>Returns with offset=2, and data is a list containing the last author.</li>         <li>This author has their authorId, url, and list of papers.</li>         <li>Each paper has its paperId, year, and list of authors.</li>         <li>In that list of authors, each author has their authorId and name.</li>     </ul> </ul>
        :return: AuthorBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_graph_get_paper_authors_with_http_info(paper_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_get_paper_authors_with_http_info(paper_id, **kwargs)  # noqa: E501
            return data

    def get_graph_get_paper_authors_with_http_info(self, paper_id, **kwargs):  # noqa: E501
        """Details about a paper's authors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_paper_authors_with_http_info(paper_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paper_id: The following types of IDs are supported: <ul>     <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>     <li><code>CorpusId:&lt;id&gt;</code> - Semantic Scholar numerical ID, e.g. <code>215416146</code></li>     <li><code>DOI:&lt;doi&gt;</code> - a <a href=\"http://doi.org\">Digital Object Identifier</a>,         e.g. <code>DOI:10.18653/v1/N18-3011</code></li>     <li><code>ARXIV:&lt;id&gt;</code> - <a href=\"https://arxiv.org/\">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>     <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>     <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>     <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>     <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>     <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li> </ul>  URLs are recognized from the following sites: <ul>     <li><a href=\"https://www.semanticscholar.org/\">semanticscholar.org</a></li>     <li><a href=\"https://arxiv.org/\">arxiv.org</a></li>     <li><a href=\"https://www.aclweb.org\">aclweb.org</a></li>     <li><a href=\"https://www.acm.org/\">acm.org</a></li>     <li><a href=\"https://www.biorxiv.org/\">biorxiv.org</a></li> </ul> (required)
        :param int offset: When returning a list of results, start with the element at this position in the list.
        :param int limit: The maximum number of results to return.
        :param str fields: A comma-separated list of the fields to be returned.<br><br> The following case-sensitive author fields are recognized: <ul>     <li><code>authorId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>name</code> - Included if no fields are specified</li>     <li><code>aliases</code></li>     <li><code>affiliations</code></li>     <li><code>homepage</code></li>     <li><code>papers</code></li>     <ul>         <li><code>paperId</code> - Always included</li>         <li><code>externalIds</code></li>         <li><code>url</code></li>         <li><code>title</code> - Included if no fields are specified</li>         <li><code>abstract</code></li>         <li><code>venue</code></li>         <li><code>year</code></li>         <li><code>referenceCount</code></li>         <li><code>citationCount</code></li>         <li><code>influentialCitationCount</code></li>         <li><code>isOpenAccess</code></li>         <li><code>fieldsOfStudy</code></li>         <li><code>authors</code> - Will include: <code>authorId</code> & <code>name</code></li>     </ul> </ul> <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/authors</code></li>     <ul>         <li>Returns with offset=0, and data is a list of all 3 authors.</li>         <li>Each author has their authorId and name</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/authors?fields=affiliations,papers&limit=2</code></li>     <ul>         <li>Returns with offset=0, next=2, and data is a list of 2 authors.</li>         <li>Each author has their authorId, affiliations, and list of papers.</li>         <li>Each paper has its paperId and title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/authors?fields=url,papers.year,papers.authors&offset=2</code></li>     <ul>         <li>Returns with offset=2, and data is a list containing the last author.</li>         <li>This author has their authorId, url, and list of papers.</li>         <li>Each paper has its paperId, year, and list of authors.</li>         <li>In that list of authors, each author has their authorId and name.</li>     </ul> </ul>
        :return: AuthorBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paper_id', 'offset', 'limit', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graph_get_paper_authors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'paper_id' is set
        if self.api_client.client_side_validation and ('paper_id' not in params or
                                                       params['paper_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `paper_id` when calling `get_graph_get_paper_authors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'paper_id' in params:
            path_params['paper_id'] = params['paper_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paper/{paper_id}/authors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_graph_get_paper_citations(self, paper_id, **kwargs):  # noqa: E501
        """Details about a paper's citations  # noqa: E501

        Fetch details about the papers the cite this paper (i.e. papers in whose bibliography this paper appears)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_paper_citations(paper_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paper_id: The following types of IDs are supported: <ul>     <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>     <li><code>CorpusId:&lt;id&gt;</code> - Semantic Scholar numerical ID, e.g. <code>215416146</code></li>     <li><code>DOI:&lt;doi&gt;</code> - a <a href=\"http://doi.org\">Digital Object Identifier</a>,         e.g. <code>DOI:10.18653/v1/N18-3011</code></li>     <li><code>ARXIV:&lt;id&gt;</code> - <a href=\"https://arxiv.org/\">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>     <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>     <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>     <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>     <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>     <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li> </ul>  URLs are recognized from the following sites: <ul>     <li><a href=\"https://www.semanticscholar.org/\">semanticscholar.org</a></li>     <li><a href=\"https://arxiv.org/\">arxiv.org</a></li>     <li><a href=\"https://www.aclweb.org\">aclweb.org</a></li>     <li><a href=\"https://www.acm.org/\">acm.org</a></li>     <li><a href=\"https://www.biorxiv.org/\">biorxiv.org</a></li> </ul> (required)
        :param int offset: When returning a list of results, start with the element at this position in the list.
        :param int limit: The maximum number of results to return.
        :param str fields: A comma-separated list of the fields to be returned. <br><br> The following case-sensitive citation fields are recognized: <ul>     <li><code>contexts</code></li>     <li><code>intents</code></li>     <li><code>isInfluential</code></li>     <li><code>paperId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>title</code> - Included if no fields are specified</li>     <li><code>abstract</code></li>     <li><code>venue</code></li>     <li><code>year</code></li>     <li><code>referenceCount</code></li>     <li><code>citationCount</code></li>     <li><code>influentialCitationCount</code></li>     <li><code>isOpenAccess</code></li>     <li><code>fieldsOfStudy</code></li>     <li><code>authors</code> - Up to 500 will be returned.  Will include: <code>authorId</code> & <code>name</code></li> </ul> <br> <br> Examples: <ul>     <li>Let's suppose that the paper in the examples below has 1600 citations...</li>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/citations</code></li>     <ul>         <li>Returns with offset=0, next=100, and data is a list of 100 citations.</li>         <li>Each citation has a citingPaper which contains its paperId and title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/citations?fields=contexts,intents,isInfluential,abstract&offset=200&limit=10</code></li>     <ul>         <li>Returns with offset=200, next=210, and data is a list of 10 citations.</li>         <li>Each citation has contexts, intents, isInfluential, and a citingPaper which contains its paperId and abstract.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/citations?fields=authors&offset=1500&limit=500</code></li>     <ul>         <li>Returns with offset=1500, and data is a list of the last 100 citations.</li>         <li>Each citation has a citingPaper which contains its paperId plus a list of authors</li>         <li>The authors under each citingPaper has their authorId and name.</li>     </ul> </ul>
        :return: CitationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_graph_get_paper_citations_with_http_info(paper_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_get_paper_citations_with_http_info(paper_id, **kwargs)  # noqa: E501
            return data

    def get_graph_get_paper_citations_with_http_info(self, paper_id, **kwargs):  # noqa: E501
        """Details about a paper's citations  # noqa: E501

        Fetch details about the papers the cite this paper (i.e. papers in whose bibliography this paper appears)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_paper_citations_with_http_info(paper_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paper_id: The following types of IDs are supported: <ul>     <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>     <li><code>CorpusId:&lt;id&gt;</code> - Semantic Scholar numerical ID, e.g. <code>215416146</code></li>     <li><code>DOI:&lt;doi&gt;</code> - a <a href=\"http://doi.org\">Digital Object Identifier</a>,         e.g. <code>DOI:10.18653/v1/N18-3011</code></li>     <li><code>ARXIV:&lt;id&gt;</code> - <a href=\"https://arxiv.org/\">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>     <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>     <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>     <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>     <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>     <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li> </ul>  URLs are recognized from the following sites: <ul>     <li><a href=\"https://www.semanticscholar.org/\">semanticscholar.org</a></li>     <li><a href=\"https://arxiv.org/\">arxiv.org</a></li>     <li><a href=\"https://www.aclweb.org\">aclweb.org</a></li>     <li><a href=\"https://www.acm.org/\">acm.org</a></li>     <li><a href=\"https://www.biorxiv.org/\">biorxiv.org</a></li> </ul> (required)
        :param int offset: When returning a list of results, start with the element at this position in the list.
        :param int limit: The maximum number of results to return.
        :param str fields: A comma-separated list of the fields to be returned. <br><br> The following case-sensitive citation fields are recognized: <ul>     <li><code>contexts</code></li>     <li><code>intents</code></li>     <li><code>isInfluential</code></li>     <li><code>paperId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>title</code> - Included if no fields are specified</li>     <li><code>abstract</code></li>     <li><code>venue</code></li>     <li><code>year</code></li>     <li><code>referenceCount</code></li>     <li><code>citationCount</code></li>     <li><code>influentialCitationCount</code></li>     <li><code>isOpenAccess</code></li>     <li><code>fieldsOfStudy</code></li>     <li><code>authors</code> - Up to 500 will be returned.  Will include: <code>authorId</code> & <code>name</code></li> </ul> <br> <br> Examples: <ul>     <li>Let's suppose that the paper in the examples below has 1600 citations...</li>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/citations</code></li>     <ul>         <li>Returns with offset=0, next=100, and data is a list of 100 citations.</li>         <li>Each citation has a citingPaper which contains its paperId and title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/citations?fields=contexts,intents,isInfluential,abstract&offset=200&limit=10</code></li>     <ul>         <li>Returns with offset=200, next=210, and data is a list of 10 citations.</li>         <li>Each citation has contexts, intents, isInfluential, and a citingPaper which contains its paperId and abstract.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/citations?fields=authors&offset=1500&limit=500</code></li>     <ul>         <li>Returns with offset=1500, and data is a list of the last 100 citations.</li>         <li>Each citation has a citingPaper which contains its paperId plus a list of authors</li>         <li>The authors under each citingPaper has their authorId and name.</li>     </ul> </ul>
        :return: CitationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paper_id', 'offset', 'limit', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graph_get_paper_citations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'paper_id' is set
        if self.api_client.client_side_validation and ('paper_id' not in params or
                                                       params['paper_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `paper_id` when calling `get_graph_get_paper_citations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'paper_id' in params:
            path_params['paper_id'] = params['paper_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paper/{paper_id}/citations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CitationBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_graph_get_paper_references(self, paper_id, **kwargs):  # noqa: E501
        """Details about a paper's references  # noqa: E501

        Fetch details about the papers cited by this paper (i.e. appearing in this paper's bibliography)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_paper_references(paper_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paper_id: The following types of IDs are supported: <ul>     <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>     <li><code>CorpusId:&lt;id&gt;</code> - Semantic Scholar numerical ID, e.g. <code>215416146</code></li>     <li><code>DOI:&lt;doi&gt;</code> - a <a href=\"http://doi.org\">Digital Object Identifier</a>,         e.g. <code>DOI:10.18653/v1/N18-3011</code></li>     <li><code>ARXIV:&lt;id&gt;</code> - <a href=\"https://arxiv.org/\">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>     <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>     <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>     <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>     <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>     <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li> </ul>  URLs are recognized from the following sites: <ul>     <li><a href=\"https://www.semanticscholar.org/\">semanticscholar.org</a></li>     <li><a href=\"https://arxiv.org/\">arxiv.org</a></li>     <li><a href=\"https://www.aclweb.org\">aclweb.org</a></li>     <li><a href=\"https://www.acm.org/\">acm.org</a></li>     <li><a href=\"https://www.biorxiv.org/\">biorxiv.org</a></li> </ul> (required)
        :param int offset: When returning a list of results, start with the element at this position in the list.
        :param int limit: The maximum number of results to return.
        :param str fields: A comma-separated list of the fields to be returned. <br><br> The following case-sensitive reference fields are recognized: <ul>     <li><code>contexts</code></li>     <li><code>intents</code></li>     <li><code>isInfluential</code></li>     <li><code>paperId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>title</code> - Included if no fields are specified</li>     <li><code>abstract</code></li>     <li><code>venue</code></li>     <li><code>year</code></li>     <li><code>referenceCount</code></li>     <li><code>citationCount</code></li>     <li><code>influentialCitationCount</code></li>     <li><code>isOpenAccess</code></li>     <li><code>fieldsOfStudy</code></li>     <li><code>authors</code> - Up to 500 will be returned.  Will include: <code>authorId</code> & <code>name</code></li> </ul> <br> <br> Examples: <ul>     <li>Let's suppose that the paper in the examples below has 1600 references...</li>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/references</code></li>     <ul>         <li>Returns with offset=0, next=100, and data is a list of 100 references.</li>         <li>Each reference has a citedPaper which contains its paperId and title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/references?fields=contexts,intents,isInfluential,abstract&offset=200&limit=10</code></li>     <ul>         <li>Returns with offset=200, next=210, and data is a list of 10 references.</li>         <li>Each reference has contexts, intents, isInfluential, and a citedPaper which contains its paperId and abstract.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/references?fields=authors&offset=1500&limit=500</code></li>     <ul>         <li>Returns with offset=1500, and data is a list of the last 100 references.</li>         <li>Each reference has a citedPaper which contains its paperId plus a list of authors</li>         <li>The authors under each citedPaper has their authorId and name.</li>     </ul> </ul>
        :return: ReferenceBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_graph_get_paper_references_with_http_info(paper_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_get_paper_references_with_http_info(paper_id, **kwargs)  # noqa: E501
            return data

    def get_graph_get_paper_references_with_http_info(self, paper_id, **kwargs):  # noqa: E501
        """Details about a paper's references  # noqa: E501

        Fetch details about the papers cited by this paper (i.e. appearing in this paper's bibliography)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_paper_references_with_http_info(paper_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paper_id: The following types of IDs are supported: <ul>     <li><code>&lt;sha&gt;</code> - a Semantic Scholar ID, e.g. <code>649def34f8be52c8b66281af98ae884c09aef38b</code></li>     <li><code>CorpusId:&lt;id&gt;</code> - Semantic Scholar numerical ID, e.g. <code>215416146</code></li>     <li><code>DOI:&lt;doi&gt;</code> - a <a href=\"http://doi.org\">Digital Object Identifier</a>,         e.g. <code>DOI:10.18653/v1/N18-3011</code></li>     <li><code>ARXIV:&lt;id&gt;</code> - <a href=\"https://arxiv.org/\">arXiv.rg</a>, e.g. <code>ARXIV:2106.15928</code></li>     <li><code>MAG:&lt;id&gt;</code> - Microsoft Academic Graph, e.g. <code>MAG:112218234</code></li>     <li><code>ACL:&lt;id&gt;</code> - Association for Computational Linguistics, e.g. <code>ACL:W12-3903</code></li>     <li><code>PMID:&lt;id&gt;</code> - PubMed/Medline, e.g. <code>PMID:19872477</code></li>     <li><code>PMCID:&lt;id&gt;</code> - PubMed Central, e.g. <code>PMCID:2323736</code></li>     <li><code>URL:&lt;url&gt;</code> - URL from one of the sites listed below, e.g. <code>URL:https://arxiv.org/abs/2106.15928v1</code></li> </ul>  URLs are recognized from the following sites: <ul>     <li><a href=\"https://www.semanticscholar.org/\">semanticscholar.org</a></li>     <li><a href=\"https://arxiv.org/\">arxiv.org</a></li>     <li><a href=\"https://www.aclweb.org\">aclweb.org</a></li>     <li><a href=\"https://www.acm.org/\">acm.org</a></li>     <li><a href=\"https://www.biorxiv.org/\">biorxiv.org</a></li> </ul> (required)
        :param int offset: When returning a list of results, start with the element at this position in the list.
        :param int limit: The maximum number of results to return.
        :param str fields: A comma-separated list of the fields to be returned. <br><br> The following case-sensitive reference fields are recognized: <ul>     <li><code>contexts</code></li>     <li><code>intents</code></li>     <li><code>isInfluential</code></li>     <li><code>paperId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>title</code> - Included if no fields are specified</li>     <li><code>abstract</code></li>     <li><code>venue</code></li>     <li><code>year</code></li>     <li><code>referenceCount</code></li>     <li><code>citationCount</code></li>     <li><code>influentialCitationCount</code></li>     <li><code>isOpenAccess</code></li>     <li><code>fieldsOfStudy</code></li>     <li><code>authors</code> - Up to 500 will be returned.  Will include: <code>authorId</code> & <code>name</code></li> </ul> <br> <br> Examples: <ul>     <li>Let's suppose that the paper in the examples below has 1600 references...</li>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/references</code></li>     <ul>         <li>Returns with offset=0, next=100, and data is a list of 100 references.</li>         <li>Each reference has a citedPaper which contains its paperId and title.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/references?fields=contexts,intents,isInfluential,abstract&offset=200&limit=10</code></li>     <ul>         <li>Returns with offset=200, next=210, and data is a list of 10 references.</li>         <li>Each reference has contexts, intents, isInfluential, and a citedPaper which contains its paperId and abstract.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/649def34f8be52c8b66281af98ae884c09aef38b/references?fields=authors&offset=1500&limit=500</code></li>     <ul>         <li>Returns with offset=1500, and data is a list of the last 100 references.</li>         <li>Each reference has a citedPaper which contains its paperId plus a list of authors</li>         <li>The authors under each citedPaper has their authorId and name.</li>     </ul> </ul>
        :return: ReferenceBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paper_id', 'offset', 'limit', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graph_get_paper_references" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'paper_id' is set
        if self.api_client.client_side_validation and ('paper_id' not in params or
                                                       params['paper_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `paper_id` when calling `get_graph_get_paper_references`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'paper_id' in params:
            path_params['paper_id'] = params['paper_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paper/{paper_id}/references', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReferenceBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_graph_get_paper_search(self, query, **kwargs):  # noqa: E501
        """Search for papers by keyword  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_paper_search(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search query string.  We support boolean operators OR and AND.   If you would like to ensure the inclusion of particular search terms using a MUST operator,  simply include a plus sign before the term that must be included.  For example, searching +Epidemic +Modeling +Canada will ensure each term is included in the results.  Similarly, if you'd like to ensure the exclusion of a particular search term using a MUST NOT operator, simply include a minus sign before the term that must be excluded.  For example, searching +Epidemic +Modeling +Canada -COVID will ensure each term is included in the search results but will exclude content with the negated term.  Semantic Scholar search API does not currently support wildcards. If this is a feature you would like, please let us know. (required)
        :param int offset: When returning a list of results, start with the element at this position in the list.
        :param int limit: The maximum number of results to return.
        :param str fields: A comma-separated list of the fields to be returned.<br><br>  The following case-sensitive paper fields are recognized: <ul>     <li><code>paperId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>title</code> - Included if no fields are specified</li>     <li><code>abstract</code></li>     <li><code>venue</code></li>     <li><code>year</code></li>     <li><code>referenceCount</code></li>     <li><code>citationCount</code></li>     <li><code>influentialCitationCount</code></li>     <li><code>isOpenAccess</code></li>     <li><code>fieldsOfStudy</code></li>     <li><code>authors</code> - Up to 500 will be returned</li>     <ul>         <li><code>authorId</code> - Always included</li>         <li><code>name</code> - Always included</li>     </ul> </ul> <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/search?query=covid+vaccination&offset=100&limit=3</code></li>     <ul>         <li>Returns with total=576278, offset=100, next=103, and data is a list of 3 papers.</li>         <li>Each paper has the always included field of paperId plus its title.  </li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/search?query=covid&fields=url,abstract,authors</code></li>     <ul>         <li>Returns with total=639637, offset=0, next=100, and data is a list of 100 papers.</li>         <li>Each paper has paperId, url, abstract, and a list of authors.</li>         <li>Each author under that list has authorId and name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/search?query=totalGarbageNonsense</code></li>     <ul>         <li>Returns with total = 0, offset=0, and data is a list of 0 papers.</li>     </ul> </ul>
        :return: PaperSearchBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_graph_get_paper_search_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_get_paper_search_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def get_graph_get_paper_search_with_http_info(self, query, **kwargs):  # noqa: E501
        """Search for papers by keyword  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_graph_get_paper_search_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search query string.  We support boolean operators OR and AND.   If you would like to ensure the inclusion of particular search terms using a MUST operator,  simply include a plus sign before the term that must be included.  For example, searching +Epidemic +Modeling +Canada will ensure each term is included in the results.  Similarly, if you'd like to ensure the exclusion of a particular search term using a MUST NOT operator, simply include a minus sign before the term that must be excluded.  For example, searching +Epidemic +Modeling +Canada -COVID will ensure each term is included in the search results but will exclude content with the negated term.  Semantic Scholar search API does not currently support wildcards. If this is a feature you would like, please let us know. (required)
        :param int offset: When returning a list of results, start with the element at this position in the list.
        :param int limit: The maximum number of results to return.
        :param str fields: A comma-separated list of the fields to be returned.<br><br>  The following case-sensitive paper fields are recognized: <ul>     <li><code>paperId</code> - Always included</li>     <li><code>externalIds</code></li>     <li><code>url</code></li>     <li><code>title</code> - Included if no fields are specified</li>     <li><code>abstract</code></li>     <li><code>venue</code></li>     <li><code>year</code></li>     <li><code>referenceCount</code></li>     <li><code>citationCount</code></li>     <li><code>influentialCitationCount</code></li>     <li><code>isOpenAccess</code></li>     <li><code>fieldsOfStudy</code></li>     <li><code>authors</code> - Up to 500 will be returned</li>     <ul>         <li><code>authorId</code> - Always included</li>         <li><code>name</code> - Always included</li>     </ul> </ul> <br><br> Examples: <ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/search?query=covid+vaccination&offset=100&limit=3</code></li>     <ul>         <li>Returns with total=576278, offset=100, next=103, and data is a list of 3 papers.</li>         <li>Each paper has the always included field of paperId plus its title.  </li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/search?query=covid&fields=url,abstract,authors</code></li>     <ul>         <li>Returns with total=639637, offset=0, next=100, and data is a list of 100 papers.</li>         <li>Each paper has paperId, url, abstract, and a list of authors.</li>         <li>Each author under that list has authorId and name.</li>     </ul>     <li><code>https://api.semanticscholar.org/graph/v1/paper/search?query=totalGarbageNonsense</code></li>     <ul>         <li>Returns with total = 0, offset=0, and data is a list of 0 papers.</li>     </ul> </ul>
        :return: PaperSearchBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'offset', 'limit', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graph_get_paper_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if self.api_client.client_side_validation and ('query' not in params or
                                                       params['query'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query` when calling `get_graph_get_paper_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paper/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaperSearchBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
