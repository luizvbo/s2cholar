# coding: utf-8

"""
    Literature Graph Service

    Fetch paper and author data from the Semantic Scholar corpus

    OpenAPI spec version: 1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint

import six

from s2cholar.configuration import Configuration


class Author(object):
    """NOTE: This class is auto generated by the swagger code generator
    program and manually modified later.

    Args:
        swagger_types (dict): The key is attribute name and the value is
            attribute type.
        attribute_map (dict): The key is attribute name and the value is json
            key in definition.
    """
    swagger_types = {
        'author_id': 'str',
        'external_ids': 'object',
        'url': 'str',
        'name': 'str',
        'aliases': 'object',
        'affiliations': 'object',
        'homepage': 'str'
    }

    attribute_map = {
        'author_id': 'authorId',
        'external_ids': 'externalIds',
        'url': 'url',
        'name': 'name',
        'aliases': 'aliases',
        'affiliations': 'affiliations',
        'homepage': 'homepage'
    }

    def __init__(
        self, author_id=None, external_ids=None, url=None, name=None,
        aliases=None, affiliations=None, homepage=None, _configuration=None
    ):
        """Author - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._author_id = None
        self._external_ids = None
        self._url = None
        self._name = None
        self._aliases = None
        self._affiliations = None
        self._homepage = None
        self.discriminator = None

        self.author_id = author_id
        if external_ids is not None:
            self.external_ids = external_ids
        if url is not None:
            self.url = url
        if name is not None:
            self.name = name
        if aliases is not None:
            self.aliases = aliases
        if affiliations is not None:
            self.affiliations = affiliations
        if homepage is not None:
            self.homepage = homepage

    @property
    def author_id(self):
        """Gets the author_id of this Author.

        Returns:
            str: The author_id of this Author.
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this Author.

        Params:
            author_id (str): The author_id of this Author.
        """
        if self._configuration.client_side_validation and author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")

        self._author_id = author_id

    @property
    def external_ids(self):
        """Gets the external_ids of this Author.

        ORCID/DBLP IDs for this author, if known

        Returns:
            object: The external_ids of this Author.
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this Author.

        ORCID/DBLP IDs for this author, if known

        :param external_ids: The external_ids of this Author.
        :type: object
        """

        self._external_ids = external_ids

    @property
    def url(self):
        """Gets the url of this Author.

        URL on the Semantic Scholar website

        Returns:
            str: The url of this Author.
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Author.

        URL on the Semantic Scholar website

        Params:
            url (str): The url of this Author.
        """

        self._url = url

    @property
    def name(self):
        """Gets the name of this Author.

        Returns:
            str: The name of this Author.
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Author.

        Params:
            name (str): The name of this Author.
        """

        self._name = name

    @property
    def aliases(self):
        """Gets the aliases of this Author.

        List of aliases

        Returns:
            str: The aliases of this Author.
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this Author.

        List of aliases

        Params:
            aliases (object): The aliases of this Author.
        """

        self._aliases = aliases

    @property
    def affiliations(self):
        """Gets the affiliations of this Author.

        List of affiliations

        Returns:
            object: The affiliations of this Author.
        """
        return self._affiliations

    @affiliations.setter
    def affiliations(self, affiliations):
        """Sets the affiliations of this Author.

        List of affiliations

        Params:
            affiliations (object): The affiliations of this Author.
        """

        self._affiliations = affiliations

    @property
    def homepage(self):
        """Gets the homepage of this Author.

        Author's own homepage

        Returns:
            str: The homepage of this Author.
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this Author.

        Author's own homepage

        Params:
            homepage (str): The homepage of this Author.
        """

        self._homepage = homepage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Author, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Author):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Author):
            return True

        return self.to_dict() != other.to_dict()
